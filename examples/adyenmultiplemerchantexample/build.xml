<?xml version="1.0"?>
<!--
 Copyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved.
-->
<project name="adyenmultiplemerchantexample" default="all">
	<property file="platformhome.properties" />

	<!-- next line is only for eclipse to get rid of warnings -->
	<property name="platformhome" location=".." />

	<import file="${platformhome}/resources/ant/antmacros.xml" />


	<!--
 *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING ***

 WARNING: THIS FILE IS GENERATED AND WILL BE OVERWRITTEN DURING THE BUILD PROCESS.
          DO NOT EDIT THIS FILE.

          IF YOU WANT TO ADAPT THE BUILD PROCESS, CREATE A FILE
          CALLED buildcallbacks.xml IN YOUR EXTENSION.
          PLEASE ALSO REFER TO THE DOCUMENTATION ON THE HYBRIS HELP SITE
          (https://help.sap.com/viewer/d0224eca81e249cb821f2cdf45a82ace/LATEST/en-US/8b6ded0d86691014a6fab18e171c1f91.html).


 *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING ***
-->

	<target name="apidoc" description="build javadoc for the extension">
		<apidoc extensions="${extname}" create.zip="true" zip.name="${extname}" />
	</target>

	<target name="clean" description="cleans the extension">
		<extension_clean extname="${extname}" />
	</target>

	<target name="build" description="build all but do not touch appserver">
		<extension_build extname="${extname}" />
	</target>

	<target name="deploy" description="deploy complete extension">
		<deploy />
	</target>

	<target name="jspcompile" description="do jspcompile even if switched off">
		<appserver_jspcompile extname="${extname}" />
	</target>

	<target name="jspclean" description="cleans the jspcompiled classes">
		<appserver_jspclean extname="${extname}" />
	</target>

	<target name="all" depends="build,deploy" description="build and deploy complete extension">
	</target>

	<target name="checkstyle">
		<extension_checkstyle extname="${extname}" />
	</target>

	<target name="dist_source">
		<dist extensions.source="${extname}" finalzipname="${HYBRIS_TEMP_DIR}/dists/hybris-${extname}-${build.version}-${DSTAMP}_${TSTAMP}.zip" />
	</target>

	<target name="dist">
		<dist extensions.binary="${extname}" finalzipname="${HYBRIS_TEMP_DIR}/dists/hybris-${extname}-${build.version}-${DSTAMP}_${TSTAMP}.zip" />
	</target>

	<target name="sourcezip" description="Creates a sourcezip of this extension">
		<sourcezip extensions="${extname}" zipfile="${HYBRIS_TEMP_DIR}/dists/hybris-${extname}-sourcezip-${build.version}-${DSTAMP}_${TSTAMP}.zip" />
	</target>

	<target name="classpathgen" description="Generates an eclipse .classpath file">
		<create_extension_classpath_file extname="${extname}" />
	</target>

	<target name="gensource">
		<gensource />
	</target>

	<target name="build_war" description="builds war for extension">
		<buildwar extname="${extname}" />
	</target>

	<target name="clean_war" description="cleans war for extension">
		<cleanwar extname="${extname}" />
	</target>

	<target name="sonarcheck" description="Executes sonar to check this project with the sonar rules.">
		<sonarcheck extensions="${extname}"/>
	</target>

	<!-- deprecated junit targets -->
	<target name="yunit" description="execute all junit tests of this extension">
		<!-- <extension_yunit extname="${extname}" /> -->
		<fail message="Please use the 'alltests' target instead of 'yunit'" />
	</target>

	<target name="yunitweb" description="execute all web junit tests of this extension">
		<extension_yunitweb extname="${extname}" />
	</target>

	<target name="yunitinit" description="initialize the junit system">
		<yunitinit />
	</target>

	<!-- new style junit targets, see https://wiki.hybris.com/display/release4/Test+Framework+Enhancements -->
	<target name="unittests" description="executes all unittests of this extension">
		<annotationtests annotations="unittests" extensions="${extname}" />
	</target>

	<target name="demotests" description="executes all demotests of this extension">
		<annotationtests annotations="demotests" extensions="${extname}" />
	</target>

	<target name="integrationtests" description="executes all integrationtests of this extension">
		<annotationtests annotations="integrationtests" extensions="${extname}" />
	</target>

	<target name="performancetests" description="executes all performancetests of this extension">
		<annotationtests annotations="performancetests" extensions="${extname}" />
	</target>

	<target name="manualtests" description="executes all manualtests of this extension">
		<annotationtests annotations="manualtests" extensions="${extname}" />
	</target>

	<target name="alltests" description="executes all tests of this extension except manualtests and performancetests">
		<annotationtests extensions="${extname}" annotations="unittests,demotests,integrationtests" />
	</target>

	<target name="codequality" description="executes all codequality tests for this extension">
		<sonarcheck extensions="${extname}" />
	</target>

	<target name="localizationtest" description="runs the localizationtest to see if all types are localized within the extension">
		<annotationtests extensions="${extname}" packages="*.LocalizationTest" />
	</target>

	<target name="typecodetest" description="runs the reservedtypecodetest to see if any reserved typecodes are being used by this extension">
		<annotationtests extensions="${extname}" packages="*.ReservedTypecodeTest" />
	</target>

	<!-- maven targets -->
	<target name="testMavenDependencies" description="compares the defined maven dependencies with the current lib folder without changing anything">
		<testMavenDependencies extname="${extname}" />
	</target>

	<target name="updateMavenDependencies" description="deletes all jars in the extensions lib folder and replaces them with the defined maven dependencies">
		<updateMavenDependencies extname="${extname}" />
	</target>

	<!-- uml -->
	<target name="uml" description="converts the items.xml file of this extension into an xmi uml file">
		<extension_uml extname="${extname}" mode="normal" />
	</target>

	<target name="uml_simple" description="converts the items.xml file of this extension into an xmi uml file, using a simplified mapping">
		<extension_uml extname="${extname}" mode="simple" />
	</target>

	<target name="clean_uml" description="deletes all exported uml xmi files">
		<extension_clean_uml extname="${extname}" />
	</target>

	<target name="webservice_nature" description="provides webservice nature to selected extension">
		<set_webservice_nature extensionname="${extname}" />
	</target>

</project>
